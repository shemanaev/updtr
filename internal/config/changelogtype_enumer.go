// Code generated by "enumer -type=ChangelogType -yaml -json"; DO NOT EDIT.

package config

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ChangelogTypeName = "PlaintextMarkdownAsciidocHtmlGithub"

var _ChangelogTypeIndex = [...]uint8{0, 9, 17, 25, 29, 35}

const _ChangelogTypeLowerName = "plaintextmarkdownasciidochtmlgithub"

func (i ChangelogType) String() string {
	if i < 0 || i >= ChangelogType(len(_ChangelogTypeIndex)-1) {
		return fmt.Sprintf("ChangelogType(%d)", i)
	}
	return _ChangelogTypeName[_ChangelogTypeIndex[i]:_ChangelogTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ChangelogTypeNoOp() {
	var x [1]struct{}
	_ = x[Plaintext-(0)]
	_ = x[Markdown-(1)]
	_ = x[Asciidoc-(2)]
	_ = x[Html-(3)]
	_ = x[Github-(4)]
}

var _ChangelogTypeValues = []ChangelogType{Plaintext, Markdown, Asciidoc, Html, Github}

var _ChangelogTypeNameToValueMap = map[string]ChangelogType{
	_ChangelogTypeName[0:9]:        Plaintext,
	_ChangelogTypeLowerName[0:9]:   Plaintext,
	_ChangelogTypeName[9:17]:       Markdown,
	_ChangelogTypeLowerName[9:17]:  Markdown,
	_ChangelogTypeName[17:25]:      Asciidoc,
	_ChangelogTypeLowerName[17:25]: Asciidoc,
	_ChangelogTypeName[25:29]:      Html,
	_ChangelogTypeLowerName[25:29]: Html,
	_ChangelogTypeName[29:35]:      Github,
	_ChangelogTypeLowerName[29:35]: Github,
}

var _ChangelogTypeNames = []string{
	_ChangelogTypeName[0:9],
	_ChangelogTypeName[9:17],
	_ChangelogTypeName[17:25],
	_ChangelogTypeName[25:29],
	_ChangelogTypeName[29:35],
}

// ChangelogTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChangelogTypeString(s string) (ChangelogType, error) {
	if val, ok := _ChangelogTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ChangelogTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChangelogType values", s)
}

// ChangelogTypeValues returns all values of the enum
func ChangelogTypeValues() []ChangelogType {
	return _ChangelogTypeValues
}

// ChangelogTypeStrings returns a slice of all String values of the enum
func ChangelogTypeStrings() []string {
	strs := make([]string, len(_ChangelogTypeNames))
	copy(strs, _ChangelogTypeNames)
	return strs
}

// IsAChangelogType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChangelogType) IsAChangelogType() bool {
	for _, v := range _ChangelogTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for ChangelogType
func (i ChangelogType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for ChangelogType
func (i *ChangelogType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("ChangelogType should be a string, got %s", data)
	}

	var err error
	*i, err = ChangelogTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for ChangelogType
func (i ChangelogType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for ChangelogType
func (i *ChangelogType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = ChangelogTypeString(s)
	return err
}
