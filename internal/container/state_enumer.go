// Code generated by "enumer -type=State -json"; DO NOT EDIT.

package container

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _StateName = "StaleRequestedUpdateUpdatingErrorFresh"

var _StateIndex = [...]uint8{0, 5, 20, 28, 33, 38}

const _StateLowerName = "stalerequestedupdateupdatingerrorfresh"

func (i State) String() string {
	if i < 0 || i >= State(len(_StateIndex)-1) {
		return fmt.Sprintf("State(%d)", i)
	}
	return _StateName[_StateIndex[i]:_StateIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StateNoOp() {
	var x [1]struct{}
	_ = x[Stale-(0)]
	_ = x[RequestedUpdate-(1)]
	_ = x[Updating-(2)]
	_ = x[Error-(3)]
	_ = x[Fresh-(4)]
}

var _StateValues = []State{Stale, RequestedUpdate, Updating, Error, Fresh}

var _StateNameToValueMap = map[string]State{
	_StateName[0:5]:        Stale,
	_StateLowerName[0:5]:   Stale,
	_StateName[5:20]:       RequestedUpdate,
	_StateLowerName[5:20]:  RequestedUpdate,
	_StateName[20:28]:      Updating,
	_StateLowerName[20:28]: Updating,
	_StateName[28:33]:      Error,
	_StateLowerName[28:33]: Error,
	_StateName[33:38]:      Fresh,
	_StateLowerName[33:38]: Fresh,
}

var _StateNames = []string{
	_StateName[0:5],
	_StateName[5:20],
	_StateName[20:28],
	_StateName[28:33],
	_StateName[33:38],
}

// StateString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StateString(s string) (State, error) {
	if val, ok := _StateNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StateNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to State values", s)
}

// StateValues returns all values of the enum
func StateValues() []State {
	return _StateValues
}

// StateStrings returns a slice of all String values of the enum
func StateStrings() []string {
	strs := make([]string, len(_StateNames))
	copy(strs, _StateNames)
	return strs
}

// IsAState returns "true" if the value is listed in the enum definition. "false" otherwise
func (i State) IsAState() bool {
	for _, v := range _StateValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for State
func (i State) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for State
func (i *State) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("State should be a string, got %s", data)
	}

	var err error
	*i, err = StateString(s)
	return err
}
